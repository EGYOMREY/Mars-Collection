"use strict";$(document).ready(function(){function t(t,o){return Math.floor(Math.random()*(o-t+1)+t)}function o(t,o,n,s,a,r){$.getJSON(t,{format:"json"}).done(function(t){if(i.html(""),console.log(t.photos.length),t.photos.length>7){for(var l=0;l<s;l+=2){var h=document.createElement("img");h.width=o,h.height=n,h.src=t.photos[l].img_src,h.style.margin="1em 0",e.appendChild(h)}i.append(e)}else i.html("No pictures for "+a+" on day "+r+", please hit the botton again!")}).fail(function(){console.log("error")}).always(function(){console.log("Rover "+a+". Martial Day "+r+" chosen")})}var e=document.createDocumentFragment(),n=["dummy","opportunity","curiosity","spirit"],i=$(".photosContainer"),s=$("#randomButton"),a=$("#searchButton"),r=$("#rangeImagesToDisplay"),l=$("#rangeHeightImage"),h=$("#rangeWidthImage"),p=$("#imagesToDisplayText"),c=$("#widthImageText"),m=$("#heightImageText"),u=$("#spirit"),g=$("#curiosity"),d=$("#opportunity"),v="curiosity",f=10,y=300,k=300,b=void 0,T=void 0,C=void 0,w=void 0;p.html(5),c.html(y),m.html(k),r.on("input",function(){p.html($(this).val()),f=$(this).val(),f*=2}),h.on("input",function(){c.html($(this).val()),y=$(this).val()}),l.on("input",function(){m.html($(this).val()),k=$(this).val()}),$(".roverButton").click(function(){v=$(this)[0].id,u.removeClass("btn-pressed"),g.removeClass("btn-pressed"),d.removeClass("btn-pressed"),$(this).toggleClass("btn-pressed")}),a.on("click",function(){C=t(1e3,2e3),o(w="https://api.nasa.gov/mars-photos/api/v1/rovers/"+v+"/photos?sol="+C+"&page=1&api_key=LQlfelUbO5f0rqk5UAS9REF5XhtwkG6oFX5TWOsc",y,k,f,v,C)}),s.on("click",function(){b=Math.floor(3*Math.random())+1,T=n[b],C=t(1e3,2e3),o(w="https://api.nasa.gov/mars-photos/api/v1/rovers/"+T+"/photos?sol="+C+"&page=1&api_key=LQlfelUbO5f0rqk5UAS9REF5XhtwkG6oFX5TWOsc",y,k,f,T,C)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
