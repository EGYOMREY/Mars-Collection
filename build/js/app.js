"use strict";$(document).ready(function(){function t(t,o){return Math.floor(Math.random()*(o-t+1)+t)}function o(t,o,n,a,r,l){$.getJSON(t,{format:"json"}).done(function(t){if(i.html(""),s.html(""),console.log(t.photos.length),t.photos.length>8){for(var h=0;h<a;h+=2){var p=document.createElement("img");p.width=o,p.height=n,p.src=t.photos[h].img_src,p.style.margin="1em 0",e.appendChild(p)}i.append(e),s.html("Displaying pictures from "+r+" on Martian solar day "+l)}else s.html("No pictures from "+r+" on day "+l+", please hit the button again!")}).fail(function(){console.log("error")}).always(function(){console.log("Rover "+r+". Martial Day "+l+" chosen")})}var e=document.createDocumentFragment(),n=["dummy","opportunity","curiosity","spirit"],i=$(".photos-container__photos"),s=$(".photos-container__details"),a=$("#randomButton"),r=$("#searchButton"),l=$("#rangeImagesToDisplay"),h=$("#rangeHeightImage"),p=$("#rangeWidthImage"),c=$("#imagesToDisplayText"),m=$("#widthImageText"),u=$("#heightImageText"),g=$("#spirit"),d=$("#curiosity"),f=$("#opportunity"),v="curiosity",y=10,k=300,b=300,T=void 0,_=void 0,M=void 0,w=void 0;c.html(5),m.html(k),u.html(b),l.on("input",function(){c.html($(this).val()),y=$(this).val(),y*=2}),p.on("input",function(){m.html($(this).val()),k=$(this).val()}),h.on("input",function(){u.html($(this).val()),b=$(this).val()}),$(".roverButton").click(function(){v=$(this)[0].id,g.removeClass("btn-pressed"),d.removeClass("btn-pressed"),f.removeClass("btn-pressed"),$(this).toggleClass("btn-pressed")}),r.on("click",function(){M=t(1e3,2e3),o(w="https://api.nasa.gov/mars-photos/api/v1/rovers/"+v+"/photos?sol="+M+"&page=1&api_key=LQlfelUbO5f0rqk5UAS9REF5XhtwkG6oFX5TWOsc",k,b,y,v,M)}),a.on("click",function(){T=Math.floor(3*Math.random())+1,_=n[T],M=t(1e3,2e3),o(w="https://api.nasa.gov/mars-photos/api/v1/rovers/"+_+"/photos?sol="+M+"&page=1&api_key=LQlfelUbO5f0rqk5UAS9REF5XhtwkG6oFX5TWOsc",k,b,y,_,M)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
