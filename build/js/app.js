"use strict";$(document).ready(function(){function t(t,o){return Math.floor(Math.random()*(o-t+1)+t)}function o(t,o,e,s,n,i){$.getJSON(t,{format:"json"}).done(function(t){if(r.html(""),console.log(t.photos.length),t.photos.length>5){for(var l=0;l<s;l+=2){var h=document.createElement("img");h.width=o,h.height=e,h.src=t.photos[l].img_src,h.style.margin="1em 0",a.appendChild(h)}r.append(a)}else r.html("No pictures for "+n+" on day "+i+", please hit the botton again!")}).fail(function(){console.log("error")}).always(function(){console.log("Rover "+n+". Martial Day "+i+" chosen")})}var e,s,n,a=document.createDocumentFragment(),i=["dummy","opportunity","curiosity","spirit"],r=$(".photosContainer"),l=$("#randomButton"),h=$("#searchButton"),p=$("#rangeImagesToDisplay"),c=$("#rangeHeightImage"),m=$("#rangeWidthImage"),u=$("#imagesToDisplayText"),g=$("#widthImageText"),d=$("#heightImageText"),f=$("#spirit"),v=$("#curiosity"),y=$("#opportunity"),b="curiosity",k=10,C=300,T=300;u.html(5),g.html(C),d.html(T),p.on("input",function(){u.html($(this).val()),k=$(this).val(),k*=2}),m.on("input",function(){g.html($(this).val()),C=$(this).val()}),c.on("input",function(){d.html($(this).val()),T=$(this).val()}),$(".roverButton").click(function(){b=$(this)[0].id,f.hasClass("btn-pressed")?f.removeClass("btn-pressed"):v.hasClass("btn-pressed")?v.removeClass("btn-pressed"):y.hasClass("btn-pressed")&&y.removeClass("btn-pressed"),$(this).toggleClass("btn-pressed")}),h.on("click",function(){s=t(1e3,2e3),o(n="https://api.nasa.gov/mars-photos/api/v1/rovers/"+b+"/photos?sol="+s+"&page=1&api_key=LQlfelUbO5f0rqk5UAS9REF5XhtwkG6oFX5TWOsc",C,T,k,b,s)}),l.on("click",function(){e=Math.floor(3*Math.random())+1,b=i[e],s=t(1e3,2e3),o(n="https://api.nasa.gov/mars-photos/api/v1/rovers/"+b+"/photos?sol="+s+"&page=1&api_key=LQlfelUbO5f0rqk5UAS9REF5XhtwkG6oFX5TWOsc",C,T,k,b,s)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
